# improved_detailed_backtest.py
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import sys
import os
import warnings
warnings.filterwarnings('ignore')

# ÌîÑÎ°úÏ†ùÌä∏ Î£®Ìä∏Î•º ÌååÏù¥Ïç¨ Í≤ΩÎ°úÏóê Ï∂îÍ∞Ä
project_root = os.path.dirname(os.path.abspath(__file__))
sys.path.append(project_root)

# Í∏∞Ï°¥ Î™®ÎìàÎì§ ÏûÑÌè¨Ìä∏
from run_ml_backtest import (
    make_features, 
    generate_crypto_features, 
    generate_advanced_features, 
    detect_market_condition_simple,
    generate_crypto_trading_signal
)
from ml.models.price_prediction_model import PricePredictionModel

class ImprovedBacktestLogger:
    """Í∞úÏÑ†Îêú Î∞±ÌÖåÏä§Ìä∏ Î°úÍ±∞"""
    
    def __init__(self):
        self.trade_count = 0
        self.total_profit = 0
        self.total_loss = 0
        self.win_trades = 0
        self.loss_trades = 0
        self.initial_capital = 10_000_000
        self.current_capital = self.initial_capital
        self.trades = []
        
    def log_entry(self, symbol, market_condition, direction, strategy, entry_price, leverage, position_size_pct):
        """ÏßÑÏûÖ Î°úÍ∑∏"""
        print(f"üìà ÏßÑÏûÖ | {symbol} | {market_condition} | {direction} | {strategy} | "
              f"ÏßÑÏûÖÍ∞Ä: {entry_price:,.2f} | Î†àÎ≤ÑÎ¶¨ÏßÄ: {leverage}Î∞∞ | ÏßÑÏûÖÎπÑÏ§ë: {position_size_pct:.1f}%")
    
    def log_exit(self, trade_num, exit_time, symbol, market_condition, direction, strategy, 
                 profit_pct, profit_amount, exit_price, entry_price, leverage, reason):
        """Ï≤≠ÏÇ∞ Î°úÍ∑∏"""
        profit_symbol = "üìà" if profit_amount >= 0 else "üìâ"
        print(f"{profit_symbol} Í±∞Îûò #{trade_num:03d} | {exit_time} | {symbol} | {market_condition} | "
              f"{direction} | {strategy} | {profit_pct:+.2f}% | {profit_amount:+,8.0f}Ïõê | "
              f"{self.current_capital:,.0f}Ïõê")
        print(f"   ÏßÑÏûÖ: {entry_price:,.2f} | Ï≤≠ÏÇ∞: {exit_price:,.2f} | Î†àÎ≤ÑÎ¶¨ÏßÄ: {leverage}Î∞∞ | ÏÇ¨Ïú†: {reason}")
        print("-" * 120)
        
        # ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
        if profit_amount >= 0:
            self.win_trades += 1
            self.total_profit += profit_amount
        else:
            self.loss_trades += 1
            self.total_loss += abs(profit_amount)
            
        self.trades.append({
            'trade_num': trade_num,
            'symbol': symbol,
            'direction': direction,
            'strategy': strategy,
            'profit_pct': profit_pct,
            'profit_amount': profit_amount,
            'leverage': leverage,
            'reason': reason
        })
    
    def print_final_results(self):
        """ÏµúÏ¢Ö Í≤∞Í≥º Ï∂úÎ†•"""
        total_trades = self.win_trades + self.loss_trades
        win_rate = (self.win_trades / total_trades * 100) if total_trades > 0 else 0
        total_return = ((self.current_capital - self.initial_capital) / self.initial_capital * 100)
        
        print("=" * 120)
        print("üìä Î∞±ÌÖåÏä§Ìä∏ ÏµúÏ¢Ö Í≤∞Í≥º")
        print("=" * 120)
        print(f"üí∞ Ï¥àÍ∏∞ ÏûêÎ≥∏: {self.initial_capital:,}Ïõê")
        print(f"üí∞ ÏµúÏ¢Ö ÏûêÎ≥∏: {self.current_capital:,}Ïõê")
        print(f"üìà Ï¥ù ÏàòÏùµÎ•†: {total_return:+.2f}%")
        print(f"üìä Ï¥ù Í±∞Îûò Ïàò: {total_trades}Í±¥")
        print(f"‚úÖ ÏäπÎ¶¨ Í±∞Îûò: {self.win_trades}Í±¥")
        print(f"‚ùå ÏÜêÏã§ Í±∞Îûò: {self.loss_trades}Í±¥")
        print(f" ÏäπÎ•†: {win_rate:.1f}%")
        print(f"üìà Ï¥ù ÏàòÏùµ: {self.total_profit:,}Ïõê")
        print(f"üìâ Ï¥ù ÏÜêÏã§: {self.total_loss:,}Ïõê")
        print(f"üíµ ÏàúÏÜêÏùµ: {self.total_profit - self.total_loss:+,}Ïõê")
        print("=" * 120)

def improved_backtest():
    """Í∞úÏÑ†Îêú Î∞±ÌÖåÏä§Ìä∏ Ïã§Ìñâ"""
    print(" Ìä∏Î¶¨Ìîå ÏΩ§Î≥¥ Ï†ÑÎûµ Î™®Îìà Î°úÎìú ÏÑ±Í≥µ!")
    print("AlphaGenesis Í∞úÏÑ†Îêú ÏÉÅÏÑ∏ Î∞±ÌÖåÏä§Ìä∏ ÏãúÏûë")
    print("=" * 120)
    
    # Îç∞Ïù¥ÌÑ∞ Î°úÎìú
    print("üì• Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ï§ë...")
    data_path = "data/market_data/"
    symbols = ['BTC_USDT', 'ETH_USDT', 'BNB_USDT', 'ADA_USDT', 'DOT_USDT']
    
    all_data = {}
    for symbol in symbols:
        try:
            df = pd.read_csv(f"{data_path}{symbol}_1h.csv")
            print(f"‚úÖ {symbol}: {len(df)}Í∞ú Ï∫îÎì§ Î°úÎìú")
            all_data[symbol] = df
        except FileNotFoundError:
            print(f"‚ùå {symbol}: ÌååÏùº ÏóÜÏùå")
            continue
    
    if not all_data:
        print("‚ùå Îç∞Ïù¥ÌÑ∞Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§!")
        return
    
    # Î∞±ÌÖåÏä§Ìä∏ ÏÑ§Ï†ï
    target_symbol = 'BTC_USDT'
    df = all_data[target_symbol].copy()
    
    print(f"\nüìä Î∞±ÌÖåÏä§Ìä∏ Ï¢ÖÎ™©: {target_symbol}")
    print(f"üìÖ Í∏∞Í∞Ñ: {df.iloc[0]['timestamp']} ~ {df.iloc[-1]['timestamp']}")
    
    # ÌîºÏ≤ò ÏÉùÏÑ±
    print("\nüîß ÌîºÏ≤ò ÏÉùÏÑ± Ï§ë...")
    df = make_features(df)
    print("‚úÖ ÌîºÏ≤ò ÏÉùÏÑ± ÏôÑÎ£å")
    
    # ML Î™®Îç∏ ÌõàÎ†®
    print("\nü§ñ ML Î™®Îç∏ ÌõàÎ†® Ï§ë...")
    model = PricePredictionModel()
    model.train(df)
    print("‚úÖ ML Î™®Îç∏ ÌõàÎ†® ÏôÑÎ£å")
    
    # Î∞±ÌÖåÏä§Ìä∏ Ïã§Ìñâ
    print("\nÎ∞±ÌÖåÏä§Ìä∏ Ïã§Ìñâ Ï§ë...")
    print("=" * 120)
    print("Ï¢ÖÎ™©      | ÏãúÏû•Íµ≠Î©¥ | Î∞©Ìñ• | Ï†ÑÎûµ        | ÏàòÏùµÎ•†   | ÏàòÏùµÍ∏à      | ÎÇ®ÏùÄÏûêÏÇ∞")
    print("-" * 120)
    
    logger = ImprovedBacktestLogger()
    
    # Î∞±ÌÖåÏä§Ìä∏ Î°úÏßÅ (Í∞úÏÑ†Îêú Î≤ÑÏ†Ñ)
    for i in range(100, len(df) - 1):  # 100Í∞ú Ï∫îÎì§ Ïù¥ÌõÑÎ∂ÄÌÑ∞ ÏãúÏûë
        try:
            current_data = df.iloc[:i+1]
            next_data = df.iloc[i+1]
            
            # ÏãúÏû• ÏÉÅÌô© Í∞êÏßÄ
            market_condition = detect_market_condition_simple(current_data)
            
            # Ïã†Ìò∏ ÏÉùÏÑ± (Í∞úÏÑ†Îêú Î°úÏßÅ)
            signal = generate_crypto_trading_signal(current_data, model)
            
            if signal['signal'] != 'HOLD':
                # ÏßÑÏûÖ ÎπÑÏ§ë Í≥ÑÏÇ∞ (Í∞úÏÑ†Îêú Î°úÏßÅ)
                confidence = abs(signal['confidence'])
                position_size_pct = min(confidence * 10, 20)  # ÏµúÎåÄ 20%
                
                # Î†àÎ≤ÑÎ¶¨ÏßÄ Í≥ÑÏÇ∞ (Í∞úÏÑ†Îêú Î°úÏßÅ)
                if confidence > 0.8:
                    leverage = 2.0
                    strategy = "STRONG_SIGNAL"
                elif confidence > 0.6:
                    leverage = 1.5
                    strategy = "MEDIUM_SIGNAL"
                else:
                    leverage = 1.2
                    strategy = "WEAK_SIGNAL"
                
                # ÏßÑÏûÖ Î°úÍ∑∏
                logger.log_entry(
                    symbol=f"{target_symbol.replace('_', '/')}",
                    market_condition=market_condition,
                    direction=signal['signal'],
                    strategy=strategy,
                    entry_price=current_data.iloc[-1]['close'],
                    leverage=leverage,
                    position_size_pct=position_size_pct
                )
                
                # Ï≤≠ÏÇ∞ Î°úÏßÅ (Í∞úÏÑ†Îêú Î°úÏßÅ)
                entry_price = current_data.iloc[-1]['close']
                position_value = logger.current_capital * (position_size_pct / 100) * leverage
                
                # ÏÜêÏùµ Í≥ÑÏÇ∞
                if signal['signal'] == 'LONG':
                    profit_pct = (next_data['close'] - entry_price) / entry_price * leverage * 100
                else:  # SHORT
                    profit_pct = (entry_price - next_data['close']) / entry_price * leverage * 100
                
                profit_amount = position_value * (profit_pct / 100)
                logger.current_capital += profit_amount
                logger.trade_count += 1
                
                # Ï≤≠ÏÇ∞ ÏÇ¨Ïú† Í≤∞Ï†ï
                if profit_pct >= 1.0:
                    reason = "ÏùµÏ†à"
                elif profit_pct <= -2.0:
                    reason = "ÏÜêÏ†à"
                else:
                    reason = "ÏãúÍ∞ÑÏ≤≠ÏÇ∞"
                
                # Ï≤≠ÏÇ∞ Î°úÍ∑∏
                logger.log_exit(
                    trade_num=logger.trade_count,
                    exit_time=next_data['timestamp'],
                    symbol=f"{target_symbol.replace('_', '/')}",
                    market_condition=market_condition,
                    direction=signal['signal'],
                    strategy=strategy,
                    profit_pct=profit_pct,
                    profit_amount=profit_amount,
                    exit_price=next_data['close'],
                    entry_price=entry_price,
                    leverage=leverage,
                    reason=reason
                )
                
        except Exception as e:
            print(f"‚ö†Ô∏è Î∞±ÌÖåÏä§Ìä∏ Ïò§Î•ò (Ìñâ {i}): {str(e)}")
            continue
    
    # ÏµúÏ¢Ö Í≤∞Í≥º Ï∂úÎ†•
    logger.print_final_results()
    print(f"\nÎ∞±ÌÖåÏä§Ìä∏ ÏôÑÎ£å!")
    print(f"   ÏµúÏ¢Ö ÏàòÏùµÎ•†: {((logger.current_capital - logger.initial_capital) / logger.initial_capital * 100):+.2f}%")
    print(f"   Ï¥ù Í±∞Îûò Ïàò: {logger.trade_count}Í±¥")
    print(f"   ÏäπÎ•†: {(logger.win_trades / logger.trade_count * 100):.1f}%" if logger.trade_count > 0 else "   ÏäπÎ•†: 0%")

if __name__ == "__main__":
    improved_backtest()